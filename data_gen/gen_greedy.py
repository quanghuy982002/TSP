import sys
import time


def tsp_greedy(distance_matrix):
    num_cities = len(distance_matrix)
    visited = [False] * num_cities
    path = [0] * (num_cities + 1)
    path[0] = 0  # Starting city
    visited[0] = True
    total_distance = 0

    for i in range(1, num_cities):
        min_distance = sys.maxsize
        nearest_city = -1

        for j in range(1, num_cities):
            if not visited[j] and distance_matrix[path[i-1]][j] < min_distance:
                min_distance = distance_matrix[path[i-1]][j]
                nearest_city = j

        path[i] = nearest_city
        visited[nearest_city] = True
        total_distance += min_distance

    # Return to the starting city
    path[num_cities] = 0
    total_distance += distance_matrix[path[num_cities-1]][0]

    return path, total_distance


def run_tsp(matrix):
    max_cities = len(matrix)
    num_cities_list = []  # Mảng số lượng thành phố
    execution_time_list = []  # Mảng thời gian chạy

    for num_cities in range(1, max_cities + 1):
        sub_matrix = matrix[:num_cities][:num_cities]

        start_time = time.time()
        optimal_cost, optimal_path = tsp_greedy(sub_matrix)
        end_time = time.time()
        execution_time = end_time - start_time

        num_cities_list.append(num_cities)
        execution_time_list.append(execution_time)

        print("Number of Cities:", num_cities)
        print("Optimal Cost:", optimal_cost)
        print("Optimal Path:", optimal_path)
        print("Execution Time:", execution_time, "seconds")
        print("--------------------------------------------")

    return num_cities_list, execution_time_list


matrix = [
    [0,  29,  82,  46,  68,  52,  72,  42,  51,  55,  29,  74,  23,  72,  46,  21,  20,  80,  96,  81,  79,  43,  41,  5,  89,  99,  22,  90,  18,  71],
    [29,  0,  55,  46,  42,  43,  21,  75,  78,  43,  57,  50,  85,  61,  9,  68,  89,  85,  99,  10,  68,  91,  13,  25,  96,  82,  14,  13,  64,  13],
    [82,  55,  0,  96,  84,  61,  88,  57,  86,  42,  18,  14,  94,  4,  48,  8,  3,  85,  91,  60,  89,  90,  84,  60,  73,  29,  40,  83,  60,  94],
    [46,  46,  96,  0,  96,  99,  57,  61,  55,  89,  87,  53,  84,  43,  81,  86,  85,  99,  32,  18,  46,  72,  90,  25,  42,  19,  81,  81,  62,  55],
    [68,  42,  84,  96,  0,  16,  47,  74,  72,  46,  6,  14,  77,  68,  84,  81,  46,  86,  90,  57,  77,  63,  51,  76,  51,  43,  9,  25,  72,  19],
    [52,  43,  61,  99,  16,  0,  97,  2,  50,  8,  57,  76,  92,  18,  12,  89,  91,  22,  52,  16,  33,  28,  84,  8,  80,  71,  26,  77,  47,  77],
    [72,  21,  88,  57,  47,  97,  0,  64,  17,  68,  76,  64,  42,  4,  99,  80,  82,  48,  72,  54,  40,  35,  84,  24,  36,  60,  98,  81,  43,  72],
    [42,  75,  57,  61,  74,  2,  64,  0,  84,  90,  79,  15,  98,  95,  16,  14,  32,  31,  90,  68,  78,  55,  88,  8,  45,  77,  69,  81,  85,  18],
    [51,  78,  86,  55,  72,  50,  17,  84,  0,  58,  3,  58,  24,  94,  12,  67,  32,  56,  32,  14,  77,  90,  85,  24,  30,  45,  65,  64,  45,  62],
    [55,  43,  42,  89,  46,  8,  68,  90,  58,  0,  41,  21,  75,  35,  59,  88,  67,  59,  74,  92,  68,  53,  21,  97,  94,  71,  34,  14,  88,  16],
    [29,  57,  18,  87,  6,  57,  76,  79,  3,  41,  0,  34,  47,  86,  54,  14,  26,  46,  16,  43,  36,  79,  30,  14,  31,  22,  85,  61,  61,  50],
    [74,  50,  14,  53,  14,  76,  64,  15,  58,  21,  34,  0,  51,  22,  24,  53,  51,  50,  75,  46,  53,  55,  49,  69,  73,  19,  39,  57,  59,  24],
    [23,  85,  94,  84,  77,  92,  42,  98,  24,  75,  47,  51,  0,  34,  42,  50,  84,  24,  89,  54,  93,  45,  89,  42,  83,  64,  17,  16,  45,  67],
    [72,  61,  4,  43,  68,  18,  4,  95,  94,  35,  86,  22,  34,  0,  85,  75,  33,  79,  28,  56,  89,  37,  62,  57,  91,  96,  53,  34,  65,  95],
    [46,  9,  48,  81,  84,  12,  99,  16,  12,  59,  54,  24,  42,  85,  0,  83,  68,  46,  41,  68,  31,  63,  28,  94,  27,  36,  13,  49,  23,  80],
    [21,  68,  8,  86,  81,  89,  80,  14,  67,  88,  14,  53,  50,  75,  83,  0,  67,  91,  51,  67,  57,  92,  77,  80,  66,  68,  37,  71,  30,  32],
    [20,  89,  3,  85,  46,  91,  82,  32,  32,  67,  26,  51,  84,  33,  68,  67,  0,  98,  64,  71,  89,  38,  26,  42,  17,  89,  30,  94,  95,  84],
    [80,  85,  85,  99,  86,  22,  48,  31,  56,  59,  46,  50,  24,  79,  46,  91,  98,  0,  21,  21,  64,  33,  53,  65,  38,  31,  75,  89,  30,  56],
    [96,  99,  91,  32,  90,  52,  72,  90,  32,  74,  16,  75,  89,  28,  41,  51,  64,  21,  0,  39,  38,  49,  67,  37,  66,  80,  93,  79,  16,  98],
    [81,  10,  60,  18,  57,  16,  54,  68,  14,  92,  43,  46,  42,  56,  68,  67,  71,  21,  39,  0,  14,  63,  48,  35,  34,  69,  34,  91,  56,  32],
    [79,  68,  89,  46,  77,  33,  40,  78,  77,  68,  36,  53,  83,  89,  31,  57,  89,  64,  38,  14,  0,  67,  91,  81,  30,  56,  67,  81,  35,  79],
    [43,  91,  90,  72,  63,  28,  35,  55,  90,  53,  79,  55,  64,  37,  63,  92,  38,  33,  49,  63,  67,  0,  75,  96,  89,  30,  37,  53,  51,  49],
    [41,  13,  84,  90,  51,  84,  84,  88,  85,  21,  30,  49,  17,  62,  28,  77,  26,  53,  67,  48,  91,  75,  0,  30,  84,  95,  76,  21,  93,  66],
    [5,  25,  60,  25,  76,  51,  24,  8,  24,  97,  14,  69,  16,  57,  94,  80,  42,  65,  37,  35,  81,  96,  30,  0,  54,  94,  41,  85,  99,  49],
    [89,  96,  73,  42,  51,  76,  36,  45,  30,  94,  31,  73,  45,  91,  27,  66,  17,  38,  66,  34,  30,  89,  84,  54,  0,  28,  80,  70,  71,  97],
    [99,  82,  29,  19,  43,  51,  60,  77,  45,  71,  22,  19,  67,  96,  36,  68,  89,  31,  38,  69,  56,  30,  95,  94,  28,  0,  87,  72,  36,  89],
    [22,  14,  40,  81,  9,  43,  98,  69,  65,  34,  85,  39,  89,  53,  13,  37,  30,  75,  31,  34,  67,  37,  76,  41,  80,  87,  0,  73,  63,  25],
    [90,  13,  83,  81,  25,  9,  81,  81,  64,  14,  61,  57,  30,  34,  49,  71,  94,  89,  75,  91,  81,  53,  21,  85,  70,  72,  73,  0,  78,  49],
    [18,  64,  60,  81,  72,  25,  43,  85,  45,  88,  61,  59,  94,  65,  23,  30,  95,  30,  89,  56,  35,  51,  93,  99,  71,  36,  63,  78,  0,  16],
    [71,  13,  94,  55,  19,  72,  72,  18,  62,  16,  61,  24,  95,  95,  80,  32,  84,  56,  30,  32,  79,  49,  66,  49,  97,  89,  25,  49,  16,  0]
]

num_cities, execution_time = run_tsp(matrix)

print("Num Cities Array:", num_cities)
print("Execution Time Array:", execution_time)
